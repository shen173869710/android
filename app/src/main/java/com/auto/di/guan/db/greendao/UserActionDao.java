package com.auto.di.guan.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.auto.di.guan.db.UserAction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ACTION".
*/
public class UserActionDao extends AbstractDao<UserAction, Long> {

    public static final String TABLENAME = "USER_ACTION";

    /**
     * Properties of entity UserAction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property UserAccount = new Property(2, String.class, "userAccount", false, "USER_ACCOUNT");
        public final static Property ControlId = new Property(3, int.class, "controlId", false, "CONTROL_ID");
        public final static Property Time = new Property(4, long.class, "time", false, "TIME");
        public final static Property ActionId = new Property(5, int.class, "actionId", false, "ACTION_ID");
        public final static Property ActionDesc = new Property(6, String.class, "actionDesc", false, "ACTION_DESC");
        public final static Property ActionEnd = new Property(7, String.class, "actionEnd", false, "ACTION_END");
        public final static Property UserName = new Property(8, String.class, "userName", false, "USER_NAME");
        public final static Property ActionType = new Property(9, int.class, "actionType", false, "ACTION_TYPE");
    }


    public UserActionDao(DaoConfig config) {
        super(config);
    }
    
    public UserActionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ACTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"USER_ACCOUNT\" TEXT," + // 2: userAccount
                "\"CONTROL_ID\" INTEGER NOT NULL ," + // 3: controlId
                "\"TIME\" INTEGER NOT NULL ," + // 4: time
                "\"ACTION_ID\" INTEGER NOT NULL ," + // 5: actionId
                "\"ACTION_DESC\" TEXT," + // 6: actionDesc
                "\"ACTION_END\" TEXT," + // 7: actionEnd
                "\"USER_NAME\" TEXT," + // 8: userName
                "\"ACTION_TYPE\" INTEGER NOT NULL );"); // 9: actionType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ACTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserAction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(3, userAccount);
        }
        stmt.bindLong(4, entity.getControlId());
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getActionId());
 
        String actionDesc = entity.getActionDesc();
        if (actionDesc != null) {
            stmt.bindString(7, actionDesc);
        }
 
        String actionEnd = entity.getActionEnd();
        if (actionEnd != null) {
            stmt.bindString(8, actionEnd);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(9, userName);
        }
        stmt.bindLong(10, entity.getActionType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserAction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(3, userAccount);
        }
        stmt.bindLong(4, entity.getControlId());
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getActionId());
 
        String actionDesc = entity.getActionDesc();
        if (actionDesc != null) {
            stmt.bindString(7, actionDesc);
        }
 
        String actionEnd = entity.getActionEnd();
        if (actionEnd != null) {
            stmt.bindString(8, actionEnd);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(9, userName);
        }
        stmt.bindLong(10, entity.getActionType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserAction readEntity(Cursor cursor, int offset) {
        UserAction entity = new UserAction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userAccount
            cursor.getInt(offset + 3), // controlId
            cursor.getLong(offset + 4), // time
            cursor.getInt(offset + 5), // actionId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // actionDesc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // actionEnd
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userName
            cursor.getInt(offset + 9) // actionType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserAction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserAccount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setControlId(cursor.getInt(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
        entity.setActionId(cursor.getInt(offset + 5));
        entity.setActionDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setActionEnd(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setActionType(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserAction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserAction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserAction entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
